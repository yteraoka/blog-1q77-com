<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Istio on 1Q77</title><link>https://preview-blog.1q77.com/tags/istio/</link><description>Recent content in Istio on 1Q77</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Fri, 12 Aug 2022 11:51:14 +0000</lastBuildDate><atom:link href="https://preview-blog.1q77.com/tags/istio/index.xml" rel="self" type="application/rss+xml"/><item><title>envoy-sidecar-helper で Job の終了後に istio-proxy を停止させる</title><link>https://preview-blog.1q77.com/2022/08/stop-istio-proxy-using-envoy-sidecar-helper/</link><pubDate>Fri, 12 Aug 2022 11:51:14 +0000</pubDate><guid>https://preview-blog.1q77.com/2022/08/stop-istio-proxy-using-envoy-sidecar-helper/</guid><description>Istio を導入した環境で Job (CronJob) を実行すると、sidecar としての istio-proxy コンテナを Job 本来の処理が終わった後に istio-proxy コンテナを終了させないといつまで経っても Pod</description></item><item><title>istio-proxy の log level を変更する</title><link>https://preview-blog.1q77.com/2022/06/istio-proxy-log-level/</link><pubDate>Tue, 07 Jun 2022 07:34:29 +0000</pubDate><guid>https://preview-blog.1q77.com/2022/06/istio-proxy-log-level/</guid><description>Istio でよくわからない通信の問題が発生した際、Envoy の access log だけでは何が起きているのかわからない場合があります。そんなとき、当該 Pod の LogLevel を debug に変</description></item><item><title>istio sidecar の停止を connection がなくなるまで遅らせる</title><link>https://preview-blog.1q77.com/2022/02/istio-exit-on-zero-active-connections/</link><pubDate>Sat, 26 Feb 2022 15:52:27 +0000</pubDate><guid>https://preview-blog.1q77.com/2022/02/istio-exit-on-zero-active-connections/</guid><description>新機能 EXIT_ON_ZERO_ACTIVE_CONNECTIONS # 以前、「Istio 導入への道 – sidecar の調整編」という記事で、Istio の sidecar (istio-proxy) が、アプリの終了を待たずに停止してしまってアプリ側が通信で</description></item><item><title>Istio で Downstream への TCP keepalive を送る方法</title><link>https://preview-blog.1q77.com/2020/12/istio-downstream-tcpkeepalive/</link><pubDate>Mon, 14 Dec 2020 11:48:15 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/12/istio-downstream-tcpkeepalive/</guid><description>Advent Calendar 2020 全部オレシリーズ 14日目です。誕生日記念号です。おめでとうございます。ありがとうございます。 先日も gRPC と NLB での idle timeout の問題について触れまし</description></item><item><title>Istio 1.8 で holdApplicationUntilProxyStarts 設定に変更がありました</title><link>https://preview-blog.1q77.com/2020/12/istio-1-8-holdapplicationuntilproxystarts-changes/</link><pubDate>Mon, 07 Dec 2020 13:45:16 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/12/istio-1-8-holdapplicationuntilproxystarts-changes/</guid><description>Advent Calendar 2020 全部オレシリーズ 7日目です。もう完走は諦めました。 8月にリリースされた Istio 1.7 で追加され、「メインコンテナの起動前に istio-proxy の起動を完了させる」</description></item><item><title>メインコンテナの起動前に istio-proxy の起動を完了させる</title><link>https://preview-blog.1q77.com/2020/08/delaying-application-start-until-sidecar-is-ready/</link><pubDate>Tue, 25 Aug 2020 14:24:46 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/08/delaying-application-start-until-sidecar-is-ready/</guid><description>2020年8月21日に Istio 1.7 がリリースされました。その RELEASE NOTE の Production operability improvements 項に次の節を見つけました。 You can delay the application start until after the sidecar is started. This increases the reliability for deployments where the application needs to access resources</description></item><item><title>Istio 導入への道 – sidecar の調整編</title><link>https://preview-blog.1q77.com/2020/03/istio-part12/</link><pubDate>Sun, 29 Mar 2020 17:01:29 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part12/</guid><description>Istio シリーズ 第12回です。 Istio は各 Pod に sidecar として Envoy コンテナを差し込み、通信の受信も送信も Envoy を経由します。アプリの更新時などに旧バージョンの Pod の停止</description></item><item><title>ArgoCD と Istio Ingress Gateway</title><link>https://preview-blog.1q77.com/2020/03/argocd-istio-ingress/</link><pubDate>Sat, 21 Mar 2020 16:55:00 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/argocd-istio-ingress/</guid><description>ArgoCD という Kubernetes 用の CD ツールがあります。 Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. これを Istio Ingress Gateway と共に使う方法をまとめます。それだけでそこそこの量になったので。 ArgoCD の deploy #</description></item><item><title>Istio 導入への道 – Ingress Gateway で TLS Termination 編</title><link>https://preview-blog.1q77.com/2020/03/istio-part11/</link><pubDate>Fri, 20 Mar 2020 15:02:51 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part11/</guid><description>Istio シリーズ 第11回です。 TLS Termination # 外部からのアクセスを Istio Ingrress Gateway に TLS の Temination をさせたいことがありますね。今回はこれを試します。 TLS Termination の設定は Gateway で行います。</description></item><item><title>Istio 導入への道 – 図解</title><link>https://preview-blog.1q77.com/2020/03/istio-part10/</link><pubDate>Thu, 19 Mar 2020 16:13:28 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part10/</guid><description>Istio シリーズ 第10回です。 そろそろ図解してみようと思ったのだが&amp;hellip; 正確に描くのは非常に難しい、そのうち Argo CD + Argo rollouts についても書くので</description></item><item><title>Istio 導入への道 - gRPC でも Fault Injection 編</title><link>https://preview-blog.1q77.com/2020/03/istio-part9/</link><pubDate>Sat, 14 Mar 2020 16:47:43 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part9/</guid><description>Istio シリーズ 第9回です。 Istio by Example に gRPC というのがあった。 gRPC に delay が挿入されている。できるんだねそれも。 ということで試してみます。gRPC については全</description></item><item><title>Istio 導入への道 - 外部へのアクセスでも Fault Injection 編</title><link>https://preview-blog.1q77.com/2020/03/istio-part8/</link><pubDate>Wed, 11 Mar 2020 16:37:14 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part8/</guid><description>Istio シリーズです。 前回の予告通り今回は「外部サービスでも Fault Injection したいぞ」編です。 「Fault Injection 編」でその便利さを取り上げましたが、外部の API を使用</description></item><item><title>Istio 導入への道 - 外部へのアクセス / ServiceEntry 編</title><link>https://preview-blog.1q77.com/2020/03/istio-part7/</link><pubDate>Tue, 10 Mar 2020 16:22:57 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part7/</guid><description>Istio シリーズです。 今回はクラスタ内から外部のサービスへのアクセスについてです。ServiceEntry ってやつが登場です。（これを書く中でだい</description></item><item><title>Istio 導入への道 - Ingress Gatway 編</title><link>https://preview-blog.1q77.com/2020/03/istio-part6/</link><pubDate>Sun, 08 Mar 2020 14:15:13 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part6/</guid><description>Istio シリーズです。 いよいよ Ingress Gateway を試します。Istio でクラスタ外からのリクエストをサービスに流すためにはこれが必要です。 Ingress Gateway の確認 # Istio のインス</description></item><item><title>Istio 導入への道 - OutlierDetection と Retry 編</title><link>https://preview-blog.1q77.com/2020/03/istio-part5/</link><pubDate>Sun, 08 Mar 2020 13:11:21 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part5/</guid><description>Istio シリーズです。 そういえば Ingress Gateway になかなか辿りつかないな。 OutlierDetection 設定 # OutlierDetection は DestinationRule に設定するものでドキュメントもそこにあります。 一旦 VirtualService での転送先を v2 だけ</description></item><item><title>Istio 導入への道 - Fault Injection 編</title><link>https://preview-blog.1q77.com/2020/03/istio-part4/</link><pubDate>Sun, 08 Mar 2020 02:30:30 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part4/</guid><description>Istio シリーズです。 今回は Fault Injection です。前回の VirtualService に設定を入れることでわざと 503 とか 500 エラーを返したり、delay を入れたりすることができます。 500 Internal Server Error</description></item><item><title>Istio 導入への道 - VirtualService 編</title><link>https://preview-blog.1q77.com/2020/03/istio-part3/</link><pubDate>Sat, 07 Mar 2020 16:24:12 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part3/</guid><description>Istio シリーズです。 今回は VirtualService です。これを利用することで、コネクションプーリングの設定をしたり、レートリミットを入れたり、振り分け方法を指定したり</description></item><item><title>Istio 導入への道 - サービス間通信編</title><link>https://preview-blog.1q77.com/2020/03/istio-part2/</link><pubDate>Sat, 07 Mar 2020 12:34:16 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part2/</guid><description>前回の続きです。 Istio でのサービス間通信 # まあ、ただサービス間で通信するだけなら Istio は不要なわけだけれども、まずはここから。 httpbin をサービスとして deploy #</description></item><item><title>Istio 導入への道 - インストール編</title><link>https://preview-blog.1q77.com/2020/03/istio-part1/</link><pubDate>Sat, 07 Mar 2020 08:24:45 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/03/istio-part1/</guid><description>Istio 導入に向けて一歩一歩やっていき。リリースされたばかりの 1.5 を使ってみようと思います。 Minikube の起動 # まずは Kubernetes クラスタの作成。いつものように minikube です。</description></item><item><title>kind で kubernetes に触れる (2) - Istio</title><link>https://preview-blog.1q77.com/2020/01/kind-part-2/</link><pubDate>Tue, 07 Jan 2020 16:44:11 +0000</pubDate><guid>https://preview-blog.1q77.com/2020/01/kind-part-2/</guid><description>前回の続き。今回は Istio を導入してみる。 クラスタの作成 # Control Plane 1台、Worker Node 2台のクラスタを作成する。 $ cat cluster.yaml # three node (two workers) cluster kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane - role:</description></item></channel></rss>